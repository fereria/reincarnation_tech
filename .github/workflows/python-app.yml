# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
    push:
        branches:
            - master
    repository_dispatch:
        types:
            - submodule_update
    schedule:
        - cron: "0 16 * * *"

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - name: Send Slack Start
              env:
                  HOOK_URL: ${{ secrets.SlackURL }}
              run: |
                  curl -X POST --data-urlencode "payload={\"channel\": \"#github_actions\", \"username\": \"github_aciton_bot\", \"text\": \"GithubPagesのビルドを開始しました...\"}" ${HOOK_URL}

            - name: Git config
              run: |
                  git config --global core.symlinks true
                  git config --global user.name "Megumi Ando"
                  git config --global user.email "${{ secrets.EMAIL }}"

            - name: add safe directory
              git_config:
                  name: safe.directory
                  scope: global
                  value: "/work_dir" #リポジトリの配置先

            - name: Checkout
              uses: actions/checkout@v2
              with:
                  fetch-depth: 0
                  submodules: true
                  token: ${{ secrets.PERSONAL_TOKEN }}
            - uses: actions/cache@v2
              with:
                  key: ${{ github.ref }}
                  path: .cache

            - name: Update Submodule notebooks
              run: cd notebooks && git fetch && git reset --hard origin/master

            - name: Update Submodule Python
              run: cd docs/65_SampleCode/python_samplecode && git fetch && git reset --hard origin/master

            - uses: satackey/action-docker-layer-caching@v0.0.11
              continue-on-error: true

            - name: Docker Compose
              run: docker-compose -f docker/docker-compose.yml up --build -d

            - name: Create NotionPages
              run: docker exec mkdocs python scripts/create_notion_page.py ${{ secrets.NOTION_TOKEN}} ${{ secrets.NOTION_DATABASE_ID}}

            - name: nbConvert
              run: docker exec mkdocs python scripts/create_jupyter_markdown.py

            - name: Create SampleCode
              run: docker exec mkdocs python scripts/create_samplecode_md.py

            # - name: Create LangPages
            #   run: docker exec mkdocs python scripts/multi_langpage.py

            - name: Create IndexMd
              run: docker exec mkdocs python scripts/create_tab_toppage.py

            - name: Create Mkdoc .Pages
              run: docker exec mkdocs python scripts/create_mkdocs_pages.py

            - name: Mkdocs
              env:
                  TZ: Asia/Tokyo
              run: docker exec mkdocs mkdocs gh-deploy

            - name: Send Slack Finish(Success)
              if: ${{ success() }}
              env:
                  HOOK_URL: ${{ secrets.SlackURL }}
              run: |
                  curl -X POST --data-urlencode "payload={\"channel\": \"#github_actions\", \"username\": \"github_aciton_bot\", \"text\": \"GithubPagesの更新が完了しました！！\"}" ${HOOK_URL}

            - name: Send Slack Finish(Failure)
              if: ${{ failure() }}
              env:
                  HOOK_URL: ${{ secrets.SlackURL }}
              run: |
                  curl -X POST --data-urlencode "payload={\"channel\": \"#github_actions\", \"username\": \"github_aciton_bot\", \"text\": \"GithubPagesの更新に失敗しました...\"}" ${HOOK_URL}
